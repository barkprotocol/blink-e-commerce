generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Seller {
  id            String                       @id @unique @default(uuid())
  username      String                       @unique
  walletAddress String                       @unique
  createdAt     DateTime                     @default(now())
  updatedAt     DateTime                     @updatedAt
  blinkCreated  Boolean                      @default(false)
  order         Order[]
  products      Product[]
  Payments      ProductPurchaseTransaction[]
  blink         SellerBlink?

  @@index([walletAddress])
  @@index([username])
}

model Product {
  id          String                       @id @default(uuid())
  name        String
  title       String
  description String
  label       String
  imageUrl    String
  price       String
  stock       String
  sellerId    String
  createdAt   DateTime                     @default(now())
  updatedAt   DateTime                     @updatedAt
  order       Order[]
  seller      Seller                       @relation(fields: [sellerId], references: [walletAddress])
  purchase    ProductPurchaseTransaction[]

  @@index([sellerId])
}

model Order {
  id            String      @id @default(uuid())
  name          String
  city          String
  state         String
  dropOfAddress String
  ZipCode       String
  orderstatus   OrderStatus @default(PROCESSING)
  buyerWallet   String
  productId     String
  createdAt     DateTime    @default(now())
  sellerId      String
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [buyerWallet], references: [userWallet])
  product       Product     @relation(fields: [productId], references: [id])
  seller        Seller      @relation(fields: [sellerId], references: [walletAddress])
}

model SellerBlink {
  id           String   @id @default(uuid())
  title        String
  icon         String
  description  String
  label        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sellerWallet String   @unique
  user         Seller   @relation(fields: [sellerWallet], references: [walletAddress])

  @@index([sellerWallet], map: "user_wallet_address")
  @@index([id])
}

model ProductPurchaseTransaction {
  id             String   @id @default(uuid())
  amount         String
  referenceKey   String
  transasctionId String?
  status         Status   @default(PENDING)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  sellerWallet   String
  productId      String
  orderedWallet  String
  user           User     @relation(fields: [orderedWallet], references: [userWallet])
  product        Product  @relation(fields: [productId], references: [id])
  seller         Seller   @relation(fields: [sellerWallet], references: [walletAddress])

  @@index([referenceKey])
}

model User {
  id           String                       @id @default(uuid())
  userWallet   String                       @unique
  name         String
  emailAddress String                       @unique
  orders       Order[]
  purchases    ProductPurchaseTransaction[]

  @@index([userWallet])
}

enum Status {
  PENDING
  PAID
  FAILED
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
